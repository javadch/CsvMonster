@import com.vaiona.csv.reader.*
@import com.vaiona.commons.data.*
@import xqt.model.functions.*;

@args() {
    String namespace,
    String BaseClassName,
    String RecordClassName,
    String EntityClassName,
    String ReaderClassName,
    List<AttributeInfo> Attributes,
    List<AttributeInfo> Pre,
    List<AttributeInfo> Mid,
    List<AttributeInfo> Post,
    List<AttributeInfo> Post_Left,
    List<AttributeInfo> Post_Right
}

package @(namespace);

import java.text.SimpleDateFormat;
import java.util.Date;
import xqt.model.functions.*;
import xqt.model.functions.aggregates.*;
import com.vaiona.commons.logging.*;

public class @(EntityClassName) {

    @if(Attributes != null && Attributes.size() > 0){
        @for(AttributeInfo ad : Attributes) {
            public @ad.runtimeType @ad.name;
            @*
            @if(ad.runtimeType.equals("Date") || ad.runtimeType.equals("String")){
                public @ad.runtimeType @ad.name;
            } 
            else{
                public @ad.runtimeType.toLowerCase() @ad.name;
            }
            *@
        }
    }
    public boolean isValid = true; @//set it to false if the object is not valid for any reason    
    private String[] row; @// should be a weak reference
    
    public @(EntityClassName) (String[] row){
        // if there is no where clause, usually there is no need for a pre population, hence, the Pre is empty
        // in case of JOIN, the ctor initializes the join keys
        @if(Pre != null && Pre.size() > 0){ 
            try {
                @for(AttributeInfo ad : Pre) {
                    @ad.name = @ad.forwardMapTranslated;
                }
            } catch (Exception ex) {
                isValid = false;
            }
        }
        if(isValid){
            this.row = row;
        }
        //JTag.probe(this);   
    }

    @if(Mid != null && Mid.size() > 0){ 
        public @(EntityClassName) midPopulate() {
            try {
                @for(AttributeInfo ad : Mid) {
                    @ad.name = @ad.forwardMapTranslated;
                }
            } catch (Exception ex) {
                isValid = false;
            }
            return this;
        }    
    }

    @if(RecordClassName == null || RecordClassName.isEmpty()){ @/ normal populate
        public @(EntityClassName) populate(){
            @// populate all other attributes and release the row object
            @// make the object invalid if something went wrong
            @// apply data conversion checks
            @if(Post != null && Post.size() > 0){
                try {
                    @for(AttributeInfo ad : Post) {
                        @ad.name = @ad.forwardMapTranslated;
                    }
                } catch (Exception ex) {
                    LoggerHelper.logDebug("Object @(EntityClassName) failed to populate. Reason:" + ex.getMessage());
                    isValid = false;
                }
            }
            JTag.probe(this);
            row = null;
            return this;
        }
    } else { // aggregate functions are present. populate based on the row entity.
        public @(EntityClassName) (){
            @/ nothing to do here, the result entity constructed from the aggregation functions, via the following populate function 
        }

        public @(EntityClassName) populate(@(RecordClassName) rowEntity, java.util.Map<String, AggregateFunction> functions){
            @if(Post != null && Post.size() > 0){
                try {
                    @for(AttributeInfo ad : Post) {
                        @ad.name = @ad.forwardMapTranslated;
                    }
                } catch (Exception ex) {
                    isValid = false;
                }
            }
            JTag.probe(this);
            row = null;
            return this;
        }
    }

    public @(EntityClassName) populateLeft(){
        @if(Post_Left != null && Post_Left.size() > 0){
            try {
                @for(AttributeInfo ad : Post_Left) {
                    @ad.name = @ad.forwardMapTranslated;
                }
            } catch (Exception ex) {
                isValid = false;
            }
        }
        JTag.probe(this);
        row = null;
        return this;
    }

    public @(EntityClassName) populateRight(){
        @if(Post_Right != null && Post_Right.size() > 0){
            try {
                @for(AttributeInfo ad : Post_Right) {
                    @ad.name = @ad.forwardMapTranslated;
                }
            } catch (Exception ex) {
                isValid = false;
            }
        }
        JTag.probe(this);
        row = null;
        return this;
    }
}

