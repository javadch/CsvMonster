@import com.vaiona.csv.reader.*
@import com.vaiona.commons.data.*
@import com.vaiona.commons.types.*;

@args() {
    String namespace,
    String BaseClassName,
    String LeftClassName,
    String RightClassName,
    String TargetRowType,
    String Where,
    String rowHeader,
    String linePattern,
    Map<AttributeInfo, String> Ordering,
    Integer skip,
    Integer take,
    boolean writeResultsToFile,
    String joinType,
    String joinOperator,
    String leftJoinKey,
    String rightJoinKey,
    List<AttributeInfo> Mid
}

package @(namespace);

import @(namespace).*;
import com.vaiona.commons.data.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Arrays;

public class @(BaseClassName)Reader implements DataReader<@(TargetRowType), @(LeftClassName), @(RightClassName)> {
    BufferedReader leftReader, rightReader;
    BufferedWriter writer;

    //Map<String, FieldInfo> headers = new LinkedHashMap<>();

    String  columnDelimiter     = ",";
    String  columnDelimiterRight= ",";
    String  quoteMarker       = "\"";
    String  typeDelimiter       = ":";
    String  unitDelimiter       = "::";
    String  commentIndicator    = "#";
    String  missingValue        = "NA";
    String  source              = "";
    String  sourceRight         = "";
    String  target              = "";
    boolean bypassFirstRow      = false;
    boolean bypassFirstRowRight = false;
    boolean trimTokens          = true;
    LineParser lineParser       = new DefaultLineParser();
    LineParser lineParserRight  = new DefaultLineParser();

    public List<@(TargetRowType)> read(List<@(LeftClassName)> source1, List<@(RightClassName)> source2)  throws FileNotFoundException, IOException {
    
        @if(Ordering!= null && Ordering.size() > 0) {
        Comparator<@(BaseClassName)Entity> sorter = new Comparator<@(BaseClassName)Entity>() {
                    @@Override
                    public int compare(@(BaseClassName)Entity left, @(BaseClassName)Entity right){
                    @for (Map.Entry<AttributeInfo, String> entry : Ordering.entrySet()) {
                        @{
                            DataTypeInfo dti = TypeSystem.getTypes().get(entry.getKey().conceptualDataType);
                            AttributeInfo ad = entry.getKey();
                        }
                        @if(Ordering.size() == 1) {                            
                            @if(entry.getValue().toUpperCase().equals("ASC")){
                                return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                            } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                            }
                        } else {
                            @if(entry_isFirst){
                                if(@(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name))) != 0){
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            } else if (!entry_isFirst && !entry_isLast) { 
                                else if(@(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name))) != 0){
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            } else if (entry_isLast) {
                                else {
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            }
                        }
                    }
               }
              };
        }

        lineParserRight.setQuoteMarker(quoteMarker);
        lineParserRight.setDilimiter(columnDelimiterRight);
        lineParserRight.setTrimTokens(trimTokens);

        lineParser.setQuoteMarker(quoteMarker);
        lineParser.setDilimiter(columnDelimiter);
        lineParser.setTrimTokens(trimTokens);

        long skipped =0, taken =0;
        leftReader = new BufferedReader(new FileReader(source));
        FileInputStream rightInputStream = new FileInputStream(sourceRight);

        if(this.bypassFirstRow){
                leftReader.readLine();
        }           
        /////////////////////////////////////////////////////////////////////
        List<@(BaseClassName)Entity> resultset = new ArrayList<>();
        for(String[] left: leftReader.lines()
                .filter(p -> !p.trim().startsWith(commentIndicator))
                .map(p -> lineParser.split(p)).collect(Collectors.toList())                 
            ){
            @if(take > -1 && (Ordering == null || Ordering.size() <= 0)){
                if(taken >= @(take)) break;
            }
            try{
                rightInputStream.getChannel().position(0);
                rightReader = new BufferedReader(new InputStreamReader(rightInputStream));
                if (this.bypassFirstRowRight) {
                    rightReader.readLine();
                }
                for(String[] right: rightReader.lines()
                        .filter(p -> !p.trim().startsWith(commentIndicator))
                        .map(p -> lineParserRight.split(p)).collect(Collectors.toList()) 
                    ){
                    String[] joinedRow = Arrays.copyOf(left, left.length + right.length);
                    System.arraycopy(right, 0, joinedRow, left.length, right.length);

                    @/ if you rename the rowEntity, then its reference in DataReaderBuilder.extractUsedAttributes method should also change.
                    @(BaseClassName)Entity rowEntity = new @(BaseClassName)Entity(joinedRow); // PRE: populate the keys
                    if(!rowEntity.isValid) continue; // filter rows with wrong keys
                    @/ check the join type here
                    @if(joinType.equalsIgnoreCase("InnerJoin")){
                        if(!(rowEntity.@(leftJoinKey) @joinOperator rowEntity.@(rightJoinKey))) @/ Negate of the JOIN operator here!
                            continue; 
                        @if(Mid != null && Mid.size() > 0){
                            rowEntity.midPopulate(); // populate attributes required by the where clause.
                        }
                        @if(Where!= null && !Where.isEmpty()) {
                            if(!rowEntity.isValid || !(@Where)) continue; // check population validity and apply the Where clause. the negate of the where clause is checked here                       
                        } else {
                            if(!rowEntity.isValid) continue; // check population validity only
                        }
                        @/ if no sorting is requested, try applying limits here, otherwise do it when the join is finished
                        @/ ORDERING HERE
                        @if(skip > -1 && (Ordering == null || Ordering.size() <= 0)){ @/ if no ordering is imposed and limit.skip is present
                            if(skipped++ < @(skip)) continue; @/ the current row should be skipped
                        }
                        rowEntity.populate(); // populate the remaining attributes.
                        resultset.add(rowEntity);
                        @if(take > -1 && (Ordering == null || Ordering.size() <= 0)){
                            if(taken++ >= @(take)) break;
                        }
                    }   
                    else if(joinType.equalsIgnoreCase("LeftOuterJoin")){
                        @if(Mid != null && Mid.size() > 0){
                            rowEntity.midPopulate(); // populate attributes required by the where clause.
                        }
                        @if(Where!= null && !Where.isEmpty()) {
                            if(!rowEntity.isValid || !(@Where)) continue; // check population validity and apply the Where clause. the negate of the where clause is checked here                       
                        } else {
                            if(!rowEntity.isValid) continue; // check population validity only
                        }
                        @/ if no sorting is requested, try applying limits here, otherwise do it when the join is finished
                        @/ ORDERING HERE
                        @if(skip > -1 && (Ordering == null || Ordering.size() <= 0)){ // if no ordering is imposed and limit.skip is present
                            if(skipped++ < @(skip)) continue;
                        }
                        if(rowEntity.@(leftJoinKey) @joinOperator rowEntity.@(rightJoinKey)) // JOIN Operator here!!
                            rowEntity.populate();
                        else
                            rowEntity.populateLeft();
                        resultset.add(rowEntity);
                        @if(take > -1 && (Ordering == null || Ordering.size() <= 0)){
                            if(taken++ >= @(take)) break;
                        }
                    }
                    else if(joinType.equalsIgnoreCase("RightOuterJoin")){
                        @if(Mid != null && Mid.size() > 0){
                            rowEntity.midPopulate(); // populate attributes required by the where clause.
                        }
                        @if(Where!= null && !Where.isEmpty()) {
                            if(!rowEntity.isValid || !(@Where)) continue; // check population validity and apply the Where clause. the negate of the where clause is checked here                       
                        } else {
                            if(!rowEntity.isValid) continue; // check population validity only
                        }
                        @/ if no sorting is requested, try applying limits here, otherwise do it when the join is finished
                        @/ ORDERING HERE
                        @if(skip > -1 && (Ordering == null || Ordering.size() <= 0)){ // if no ordering is imposed and limit.skip is present
                            if(skipped++ < @(skip)) continue;
                        }
                        if(rowEntity.@(leftJoinKey) @joinOperator rowEntity.@(rightJoinKey)) // JOIN Operator here!!
                            rowEntity.populate();
                        else
                            rowEntity.populateRight();
                        resultset.add(rowEntity);
                        @if(take > -1 && (Ordering == null || Ordering.size() <= 0)){
                            if(taken++ >= @(take)) break;
                        }
                    }
                }
            } catch (IOException ex){
                // throw a proper exception
            }
        }
        @if(Ordering!= null && Ordering.size() > 0){ // the result should be sorted. in this case, the limit clause has not been applied yet
            resultset = resultset.stream().sorted(sorter)
            @if(skip > -1){
                .skip(@(skip))
            }
            @if(take > -1){
                .limit(@(take))
            }
            .collect(Collectors.toList());
        }
        @if(writeResultsToFile){
            resultset.stream()
            .peek(p-> writeToFile(p))
            .count(); // it is just to make the stream to be consumed
            if (writer != null){
               try {
                   writer.flush();
                   writer.close();
               } catch (IOException ex) {
                   Logger.getLogger(@(BaseClassName)Entity.class.getName()).log(Level.SEVERE, null, ex);
               }        
            }
            return null;
        } else {
            return resultset;
        }
    }

    private void writeToFile(@(BaseClassName)Entity entity){
        try {
            if (writer == null) {
                writer = new BufferedWriter(new FileWriter(target));
                writer.write("@rowHeader" + "\n");
            }
            String line = lineParser.join(@linePattern);
            writer.write(line + "\n");
        } catch (IOException ex) {
            Logger.getLogger(@(BaseClassName)Entity.class.getName()).log(Level.SEVERE, null, ex); @/ replace it with an AdpaterExcetion
        } 
    }

    @@Override
    public DataReader columnDelimiter(String value) {
        columnDelimiter = value;
        return this;
    }

    @@Override
    public DataReader quoteMarker(String value) {
        quoteMarker = value;
        return this;
    }

    @@Override
    public DataReader trimTokens(boolean value) {
        trimTokens = value;
        return this;
    }

    @@Override
    public DataReader typeDelimiter(String value) {
        typeDelimiter = value;
        return this;
    }

    @@Override
    public DataReader unitDelimiter(String value) {
        unitDelimiter = value;
        return this;
    }

    @@Override
    public DataReader missingValue(String value) {
        missingValue = value;
        return this;
    }
    
    @@Override
    public DataReader source(String value){
        source = value;
        return this;
    }
    
    @@Override
    public DataReader target(String value){
        target = value;
        return this;
    }

    @@Override
    public DataReader bypassFirstRow(Boolean value){
         bypassFirstRow = value;
        return this;
    }

    @@Override
    public DataReader bypassFirstRowRight(Boolean value) {
        bypassFirstRowRight = value;
        return this;
    }

    @@Override
    public DataReader sourceRight(String value) {
        sourceRight = value;
        return this;
    }

    @@Override
    public DataReader columnDelimiterRight(String value) {
        columnDelimiterRight = value;
        return this;
    }

}
